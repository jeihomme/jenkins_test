<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
<mapper namespace="frontSocial">

	<!-- 사회문제 목록 조회 -->
	<select id="selectSocialList" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
				*
			FROM (
				SELECT
					CAST(@rownum:=@rownum+1 AS UNSIGNED) as NO,
					S_IDX,
					S_NM,
					S_LOC,
					S_DEADLINE,
					DATEDIFF( NOW(), DATE( S_DEADLINE ) ) AS S_DDAY,
					S_RECRUIT,
					S_CATEGORY,
					S_TITLE,
					SYS_REG_ID,
					CAST( SYS_REG_DTM AS CHAR ) AS SYS_REG_DTM,
					SYS_MOD_ID,
					SYS_MOD_DTM
				FROM
				    NSTR_SITE_SOCIAL_TEAM
				WHERE
					(@rownum:=0)=0
		]]>
		<if test="sLoc not in {null, ''}">
			<![CDATA[
				AND S_LOC LIKE '%${sLoc}%'
			]]>
		</if>
		<if test="sCategory not in {null, ''}">
			<![CDATA[
				AND S_CATEGORY LIKE '%${sCategory}%'
			]]>
		</if>
		<![CDATA[
				ORDER BY DATEDIFF( NOW(), DATE( S_DEADLINE ) ) ASC
				) A
			ORDER BY A.NO DESC
		]]>
		<if test="cnt not in {null, ''}">
			<![CDATA[
				LIMIT ${cnt}
			]]>
		</if>
	</select>
	
	<!-- 사회문제 유저 목록 조회 -->
	<select id="selectSocialUserList" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
				*
			FROM (
				SELECT
					CAST(@rownum:=@rownum+1 AS UNSIGNED) as NO,
					USER_IDX,
					USER_NAME,
					USER_JOB,
					USER_NICK,
					USER_TEL,
					USER_EMAIL,
					CAST( SYS_REG_DTM AS CHAR ) AS SYS_REG_DTM,
					LONG_NOT_CONT_YN,
					USER_STAT
				FROM
				    NSTR_MNG_USER_LIST
				WHERE
					(@rownum:=0)=0
				AND USER_STAT = 'U'
				AND TEAM_INVITATION = 'N'
		]]>
		<if test="userNick not in {null, ''}">
			<![CDATA[
				AND USER_NICK LIKE '%${userNick}%'
			]]>
		</if>
		
		<![CDATA[
		) A
			ORDER BY A.NO DESC
		]]>
	</select>
	
	
	<!-- 사회문제 상세 조회 -->
	<select id="selectSocialDetail" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
				SELECT
					USER_IDX,
					USER_NAME,
					USER_JOB,
					USER_NICK,
					USER_PW,
					USER_TEL,
					USER_EMAIL,
					SYS_REG_DTM,
					LONG_NOT_CONT_YN,
					USER_STAT,
					USER_STAT_DETAIL,
					USER_STR_DATE,
					USER_END_DATE,
					ROUND( (EVAL_ACT_SINC +EVAL_TIME_APP +EVAL_PROFESSIONAL +	EVAL_CONSIDERATION +EVAL_CREATIVITY)/5 , 0) AS EVAL_AVG,
					EVAL_ACT_SINC,
					EVAL_TIME_APP,
					EVAL_PROFESSIONAL,
					EVAL_CONSIDERATION,
					EVAL_CREATIVITY
				FROM (
					SELECT
						USER.USER_IDX,
						USER.USER_NAME,
						USER.USER_JOB,
						USER.USER_NICK,
						USER.USER_PW,
						USER.USER_TEL,
						USER.USER_EMAIL,
						CAST( USER.USER_STR_DATE AS CHAR(10) ) AS USER_STR_DATE,
						CAST( USER.USER_END_DATE AS CHAR(10) ) AS USER_END_DATE,
						CAST( USER.SYS_REG_DTM AS CHAR ) AS SYS_REG_DTM,
						USER.LONG_NOT_CONT_YN,
						USER.USER_STAT,
						USER.USER_STAT_DETAIL,
						'-' AS EVAL_AVG,
						EVAL.EVAL_ACT_SINC,
						EVAL.EVAL_TIME_APP,
						EVAL.EVAL_PROFESSIONAL,
						EVAL.EVAL_CONSIDERATION,
						EVAL.EVAL_CREATIVITY
					FROM
					    NSTR_MNG_USER_LIST AS USER,
					    (	SELECT
					    		USER_EMAIL,
								(CASE WHEN CNT > 0 THEN ROUND(EVAL_ACT_SINC/CNT,0) ELSE EVAL_ACT_SINC END) AS EVAL_ACT_SINC,
								(CASE WHEN CNT > 0 THEN ROUND(EVAL_TIME_APP/CNT,0) ELSE EVAL_TIME_APP END) AS EVAL_TIME_APP,
								(CASE WHEN CNT > 0 THEN ROUND(EVAL_PROFESSIONAL/CNT,0) ELSE EVAL_PROFESSIONAL END) AS EVAL_PROFESSIONAL,
								(CASE WHEN CNT > 0 THEN ROUND(EVAL_CONSIDERATION/CNT,0) ELSE EVAL_CONSIDERATION END) AS EVAL_CONSIDERATION,
								(CASE WHEN CNT > 0 THEN ROUND(EVAL_CREATIVITY/CNT,0) ELSE EVAL_CREATIVITY END) AS EVAL_CREATIVITY
							FROM(
								SELECT
									COUNT( * ) - 1 AS CNT,
									USER_EMAIL,
									SUM(EVAL_ACT_SINC) AS EVAL_ACT_SINC,
									SUM(EVAL_TIME_APP) AS EVAL_TIME_APP,
									SUM(EVAL_PROFESSIONAL) AS EVAL_PROFESSIONAL,
									SUM(EVAL_CONSIDERATION) AS EVAL_CONSIDERATION,
									SUM(EVAL_CREATIVITY) AS EVAL_CREATIVITY
								FROM
									NSTR_SITE_USER_EVAL
								WHERE
									USER_EMAIL = '${userEmail }'
								GROUP BY USER_EMAIL
							) A
						) AS EVAL
					WHERE 1=1
						AND USER.USER_IDX = '${userIdx }'
						AND USER.USER_EMAIL = EVAL.USER_EMAIL
				) A
		]]>
	</select>

	<!-- 사회문제 ID 중복 조회 -->
	<select id="selectSocialCheckYn" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
			   USER_IDX
			FROM
			    NSTR_MNG_USER_LIST
			WHERE
			    USER_ID = '${USERWrtId}'
			ORDER BY 
				USER_IDX DESC
			LIMIT 1
		]]>
	</select>
	
	<!-- 사회문제 ID 중복 조회 -->
	<select id="selectSocialMaxIdx" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
				MAX(S_IDX) AS S_IDX
			FROM
				NSTR_SITE_SOCIAL_TEAM
		]]>
	</select>

	<!-- 사회문제 등록 -->
	<insert id="insertSocialData" parameterType="hashmap">
		<selectKey keyProperty="SEQ" resultType="int" order="AFTER">
			<![CDATA[
			SELECT LAST_INSERT_ID() AS SEQ
			]]>
		</selectKey>
		<![CDATA[
			INSERT INTO NSTR_SITE_SOCIAL_TEAM (
				S_NM,
				S_LOC,
				S_DEADLINE,
				S_RECRUIT,
				S_CATEGORY,
				S_TITLE,
				SYS_REG_ID,
				SYS_REG_DTM,
				SYS_MOD_ID,
				SYS_MOD_DTM
			) VALUES (
				'${sNm}',
				'${sLoc}',
				'${sDeadline}',
				'',
				'${sCategory}',
				'${sTitle}',
				'${userId}',
				DATE_FORMAT(NOW(), '%Y%m%d%H%i%S'),
				'${userId}',
				DATE_FORMAT(NOW(), '%Y%m%d%H%i%S')
			)
		]]>
	</insert>

	<!-- 사회문제 팀 초대 등록 -->
	<insert id="insertSocialTeamData" parameterType="hashmap">
		<![CDATA[
			INSERT INTO NSTR_SITE_SOCIAL_TEAM_MEMBER (
				S_IDX,
				S_MEM_EMAIL,
				S_MEM_TALENT,
				S_MEM_ATTI,
				S_MEM_ACPT,
				S_MEM_INVITE,
				
				SYS_REG_ID,
				SYS_REG_DTM,
				SYS_MOD_ID,
				SYS_MOD_DTM
			) VALUES (
				'${sIdx}',
				'${userEmail}',
				'팀장이 초대했습니다.',
				'팀장이 초대했습니다.',
				'${sMemAcpt}',
				'Y',
				
				'${userId}',
				DATE_FORMAT(NOW(), '%Y%m%d%H%i%S'),
				'${userId}',
				DATE_FORMAT(NOW(), '%Y%m%d%H%i%S')
			)
		]]>
	</insert>
	
	<!-- 사회문제 수정 -->
	<update id="updateSocialData" parameterType="hashmap">
		<![CDATA[
			UPDATE NSTR_MNG_USER_LIST SET
			
				USER_STAT = '${userStat}',
				USER_STAT_DETAIL = '${userStatDetail}',
				USER_STR_DATE = '${userStrDate}',
				USER_END_DATE = '${userEndDate}',
				SYS_MOD_ID = '${userId}',
				SYS_MOD_DTM = DATE_FORMAT(NOW(), '%Y%m%d%H%i%S')
			WHERE
				USER_IDX = '${userIdx}'
		]]>
	</update>
	
	<!-- 사회문제 삭제 -->
	<update id="deleteSocialData" parameterType="hashmap">
		<![CDATA[
			DELETE FROM NSTR_MNG_USER_LIST
			WHERE
				USER_IDX = '${userIdx}'
		]]>
	</update>
	
		<!-- 사용자 닉네임 중복 조회 -->
	<select id="selectEditPassCk" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
				SELECT
				   USER_PW
				FROM
				    NSTR_MNG_USER_LIST
				WHERE
				    USER_EMAIL = '${loginEmail}'
				ORDER BY 
					USER_IDX DESC
				LIMIT 1
		]]>
	</select>
	
			<!-- 사용자 닉네임 중복 조회 -->
	<select id="selectIndexDetail" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
	SELECT
	COUNT(*) AS REWARD_CNT,	
	(SELECT COUNT(*) FROM NSTR_SITE_CONTEST_LIST WHERE USER_EMAIL = '${loginEmail}') AS CONTEST_CNT,
	(SELECT
			SUM(S.ERR)AS TOTAL_T_CONTEST_CNT
			FROM (
					 	SELECT
					    COUNT(*) AS ERR
					    FROM
					    NSTR_SITE_SOCIAL_TEAM_MEMBER A 
					    WHERE S_MEM_EMAIL = '${loginEmail}'
					
					    UNION ALL -- UNION
					
					    SELECT
					    COUNT(*) AS ERR
					    FROM
					    NSTR_SITE_COMP_TEAM_MEMBER A 
					    WHERE T_MEM_EMAIL = '${loginEmail}'
				)S)AS TOTAL_T_CONTEST_CNT
		FROM
		NSTR_SITE_REWARD_LIST 
		 WHERE
		 USER_EMAIL ='${loginEmail}'
		]]>
	</select>
	
	<!-- 알람 조회 -->
	<select id="selectAlarmList" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
				ALRM_RCV_DTL,
				ALRM_RCV_LINK
			FROM
				NSTR_SITE_ALARM_LIST
					 WHERE
		 			ALRM_RCVR_EMAIL ='${loginEmail}'
		]]>
	</select>	
	
		<!--유저 평점 -->
	<select id="selectEvalList" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
       USER_EMAIL,
          (select USER_NAME from NSTR_MNG_USER_LIST where USER_EMAIL= 'rwt2004kr@naver.com' ) AS EVAL_NAME,
                (CASE WHEN CNT > 0 THEN ROUND(EVAL_ACT_SINC/CNT,0) ELSE EVAL_ACT_SINC END) AS EVAL_ACT_SINC,
                (CASE WHEN CNT > 0 THEN ROUND(EVAL_TIME_APP/CNT,0) ELSE EVAL_TIME_APP END) AS EVAL_TIME_APP,
                (CASE WHEN CNT > 0 THEN ROUND(EVAL_PROFESSIONAL/CNT,0) ELSE EVAL_PROFESSIONAL END) AS EVAL_PROFESSIONAL,
                (CASE WHEN CNT > 0 THEN ROUND(EVAL_CONSIDERATION/CNT,0) ELSE EVAL_CONSIDERATION END) AS EVAL_CONSIDERATION,
                (CASE WHEN CNT > 0 THEN ROUND(EVAL_CREATIVITY/CNT,0) ELSE EVAL_CREATIVITY END) AS EVAL_CREATIVITY,
                ROUND( (EVAL_ACT_SINC +EVAL_TIME_APP +EVAL_PROFESSIONAL +  EVAL_CONSIDERATION +EVAL_CREATIVITY)/5 , 0) AS EVAL_AVG
              FROM(
                SELECT
                  COUNT( * ) - 1 AS CNT,
                  USER_EMAIL,
                  SUM(EVAL_ACT_SINC) AS EVAL_ACT_SINC,
                  SUM(EVAL_TIME_APP) AS EVAL_TIME_APP,
                  SUM(EVAL_PROFESSIONAL) AS EVAL_PROFESSIONAL,
                  SUM(EVAL_CONSIDERATION) AS EVAL_CONSIDERATION,
                  SUM(EVAL_CREATIVITY) AS EVAL_CREATIVITY
                FROM
                  NSTR_SITE_USER_EVAL
                WHERE
                  USER_EMAIL = '${loginEmail}'
                GROUP BY USER_EMAIL
              ) A
		]]>
	</select>
	
		<!-- 수상 조회 -->
	<select id="selectRewardList" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
		SELECT
		USER_EMAIL,
       COMP_NM,RWD_HOST,
		 RWD_PREFORMANCE,
		 DATE_FORMAT(RWD_AWRD_TIME,"%Y")AS RWD_AWRD_YEAR,
		 RWD_FILE 
		 FROM 
		 NSTR_SITE_REWARD_LIST 
		 where USER_EMAIL = '${loginEmail}' 
		 AND RWD_CER_YN ='Y'
		]]>
	</select>	

</mapper>
